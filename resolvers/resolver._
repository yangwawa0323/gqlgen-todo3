package resolvers

// THIS CODE IS A STARTING POINT ONLY. IT WILL NOT BE UPDATED WITH SCHEMA CHANGES.

import (
	"context"
	"fmt"
	"math/rand"

	"github.com/yangwawa0323/gqlgen-todo3/graph/generated"
	"github.com/yangwawa0323/gqlgen-todo3/models"
)

// Resolver data struct
type Resolver struct {
	Chapters *[]models.Chapter
	Classes  *[]models.Class
}

func (r *mutationResolver) CreateTodo(ctx context.Context, input models.NewTodo) (*models.Todo, error) {
	panic("not implemented")
}

func (r *mutationResolver) CreateClass(ctx context.Context, input models.NewClass) (*models.Class, error) {
	class := models.Class{
		Title:       input.Title,
		Description: input.Description,
		ClassID:     fmt.Sprintf("%d", rand.Uint64()),
	}
	*r.Resolver.Classes = append(*r.Resolver.Classes, class)
	return &class, nil
}

func (r *queryResolver) Todos(ctx context.Context) ([]models.Todo, error) {
	panic("not implemented")
}

func (r *queryResolver) Chapters(ctx context.Context) ([]models.Chapter, error) {
	return *r.Resolver.Chapters, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
